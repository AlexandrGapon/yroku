{"ast":null,"code":"var _jsxFileName = \"C:\\\\IT\\\\react\\\\1\\\\react-lesson-1\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport Users from './Users';\nimport { connect } from 'react-redux';\nimport Preloader from '../common/Preloader/Preloader';\nimport { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../redux/usersReducer';\nimport { usersAPI } from '../../API/usersAPI';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageSelected = pageNumber => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(data.items);\n      this.props.setTotalUsersCount(data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(Preloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageSelected: this.onPageSelected,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      users: this.props.users,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispatchToProps = (dispatch) => {\n//     return {\n//         follow: (userId) => {\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users));\n//         },\n//         setCurrentPage: (pageNumber) => {\n//             dispatch(setCurrentPageAC(pageNumber))\n//         },\n//         setTotalUsersCount: (totalCount) => {\n//             dispatch(setTotalUsersCountAC(totalCount))\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(toggleIsFetchingAC(isFetching))\n//         },\n//     }\n// }\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["C:/IT/react/1/react-lesson-1/src/components/Users/UsersContainer.jsx"],"names":["React","Users","connect","Preloader","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","usersAPI","UsersContainer","Component","onPageSelected","pageNumber","props","getUsers","pageSize","then","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Users from './Users';\r\nimport { connect } from 'react-redux';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../redux/usersReducer';\r\nimport { usersAPI } from '../../API/usersAPI';\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        usersAPI.getUsers(this.props.currentPage, this.props.pageSize)\r\n            .then(data => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(data.items);\r\n                this.props.setTotalUsersCount(data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageSelected = (pageNumber) => {\r\n        this.props.toggleIsFetching(true);\r\n        this.props.setCurrentPage(pageNumber);\r\n        usersAPI.getUsers(pageNumber, this.props.pageSize)\r\n            .then(data => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(data.items);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageSelected={this.onPageSelected}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                users={this.props.users}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         follow: (userId) => {\r\n//             dispatch(followAC(userId));\r\n//         },\r\n//         unfollow: (userId) => {\r\n//             dispatch(unfollowAC(userId));\r\n//         },\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC(users));\r\n//         },\r\n//         setCurrentPage: (pageNumber) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount) => {\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         },\r\n//     }\r\n// }\r\n\r\n\r\nexport default connect(mapStateToProps, { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching })(UsersContainer);"]},"metadata":{},"sourceType":"module"}